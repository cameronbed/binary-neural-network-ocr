#include "main_test.hpp"
#include <iostream>
#include <string>
#include <cstdlib>
#include <cassert>
#include <stdexcept> // For std::invalid_argument
#include <iomanip>   // Added for std::setw and std::setfill
#include <vector>
#include <iostream>

// Add these macros to simulate missing members for testing
#define buffer_full dut->u_image_buffer.buffer_full

// Inline implementation for assert_status_code
void assert_status_code(Vsystem_controller *dut, int expected_status)
{
    if (dut->status_code_reg != expected_status)
    {
        std::cerr << "❌ Expected status: " << expected_status
                  << ", but got: " << dut->status_code_reg << "\n";
        assert(dut->status_code_reg == expected_status);
    }
}

std::string decode_seg(uint8_t seg)
{
    switch (seg)
    {
    case 0b1000000:
        return "0";
    case 0b1111001:
        return "1";
    case 0b0100100:
        return "2";
    case 0b0110000:
        return "3";
    case 0b0011001:
        return "4";
    case 0b0010010:
        return "5";
    case 0b0000010:
        return "6";
    case 0b1111000:
        return "7";
    case 0b0000000:
        return "8";
    case 0b0010000:
        return "9";
    default:
        return "Blank/Unknown";
    }
}

void send_digit(Vsystem_controller *dut, const std::vector<std::string> &digit, size_t idx)
{
    std::cout << "[TB IMG] Sending digit " << idx << "\n";

    // Flatten 30×30 into one big string
    std::string flat;
    flat.reserve(30 * 30);
    for (auto &row : digit)
        flat += row;
    assert(flat.size() == 900);

    // CLEAR buffer and wait idle
    spi_send_byte(dut, CMD_CLEAR);
    while (dut->status_code_reg == STATUS_BNN_BUSY)
        tick_main_clk(dut, 1);
    check_fsm_state(dut, STATUS_IDLE, "STATUS_IDLE");

    // ASK to send image
    spi_send_byte(dut, CMD_IMG_SEND_REQUEST);
    tick_main_clk(dut, 5);
    check_fsm_state(dut, STATUS_RX_IMG_RDY, "STATUS_RX_IMG_RDY");

    // Stream the image bits LSB-first in bytes
    for (size_t i = 0; i < flat.size(); i += 8)
    {
        uint8_t b = 0;
        for (int bit = 0; bit < 8 && i + bit < flat.size(); ++bit)
            if (flat[i + bit] == '1')
                b |= (1 << bit);
        spi_send_byte(dut, b);
        tick_main_clk(dut, 1);
    }

    // Wait for BNN to consume
    check_fsm_state(dut, STATUS_BNN_BUSY, "STATUS_BNN_BUSY");
    while (dut->status_code_reg == STATUS_BNN_BUSY)
        tick_main_clk(dut, 1);

    std::string decoded_seg = decode_seg(dut->seg);
    std::cout << "[TB IMG] 7-segment display for digit " << idx << ": " << decoded_seg << "\n";

    // Check if the decoded value matches the expected digit
    if (decoded_seg != std::to_string(idx))
    {
        std::cerr << "❌ Test failed for digit " << idx << ": Expected " << idx
                  << ", but got " << decoded_seg << "\n";
    }
    else
    {
        std::cout << "✅ Test passed for digit " << idx << "\n";
    }

    std::cout << "[TB IMG] Digit " << idx << " done (cycles: " << main_clk_ticks << ")\n";

    debug(dut);
}

void send_pattern(Vsystem_controller *dut, const std::vector<std::string> &pattern)
{
    std::cout << "[TB IMG] Sending custom pattern\n";

    // Flatten the 30×30 pattern into one big string
    std::string flat;
    flat.reserve(30 * 30);
    for (auto &row : pattern)
        flat += row;
    assert(flat.size() == 900);

    // CLEAR buffer and wait idle
    spi_send_byte(dut, CMD_CLEAR);
    while (dut->status_code_reg == STATUS_BNN_BUSY)
        tick_main_clk(dut, 1);
    check_fsm_state(dut, STATUS_IDLE, "STATUS_IDLE");

    // ASK to send image
    spi_send_byte(dut, CMD_IMG_SEND_REQUEST);
    tick_main_clk(dut, 5);
    check_fsm_state(dut, STATUS_RX_IMG_RDY, "STATUS_RX_IMG_RDY");

    // Stream the image bits LSB-first in bytes
    for (size_t i = 0; i < flat.size(); i += 8)
    {
        uint8_t b = 0;
        for (int bit = 0; bit < 8 && i + bit < flat.size(); ++bit)
            if (flat[i + bit] == '1')
                b |= (1 << bit);
        spi_send_byte(dut, b);
        tick_main_clk(dut, 1);
    }

    // Wait for BNN to consume
    check_fsm_state(dut, STATUS_BNN_BUSY, "STATUS_BNN_BUSY");
    while (dut->status_code_reg == STATUS_BNN_BUSY)
        tick_main_clk(dut, 1);

    std::cout << "[TB IMG] Custom pattern sent successfully\n";

    debug(dut);
}

void test_image_buffer(Vsystem_controller *dut)
{
    std::cout << "\n[TB IMG] test_image_buffer [Clock cycles: " << main_clk_ticks << "]\n";

    spi_send_byte(dut, 0xFD); // CMD_CLEAR
    int i = 0;
    while (dut->status_code_reg == STATUS_BNN_BUSY)
    {
        tick_main_clk(dut, 1);
        i++;
    }
    std::cout << "Waited " << i << " cycles for BNN to finish\n";

    debug(dut);

    check_fsm_state(dut, STATUS_IDLE, "STATUS_IDLE");

    std::vector<std::string> digit_0 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000011111111111111000000000",
        "000001111000000000011110000000",
        "000011100000000000000111000000",
        "000111000000000000000011100000",
        "000110000000000000000001100000",
        "001110000000000000000011100000",
        "001100000000000000000001100000",
        "001100000000000000000001100000",
        "001100000000000000000001100000",
        "001100000000000000000001100000",
        "001100000000000000000001100000",
        "001100000000000000000001100000",
        "001100000000000000000001100000",
        "001100000000000000000001100000",
        "001110000000000000000011100000",
        "000110000000000000000001100000",
        "000111000000000000000011100000",
        "000011100000000000000111000000",
        "000001111000000000011110000000",
        "000000011111111111111000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_1 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000001100000000000000",
        "000000000000111100000000000000",
        "000000000011111100000000000000",
        "000000001111111100000000000000",
        "000000001111011100000000000000",
        "000000000000011100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000000111100000000000000",
        "000000000001111110000000000000",
        "000000001111111111110000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_2 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000011111111111110000000000",
        "000000111000000001111000000000",
        "000001100000000000111100000000",
        "000001000000000000011100000000",
        "000000000000000000011100000000",
        "000000000000000000111000000000",
        "000000000000000001110000000000",
        "000000000000000011100000000000",
        "000000000000000111000000000000",
        "000000000000001110000000000000",
        "000000000000111000000000000000",
        "000000000001110000000000000000",
        "000000000011100000000000000000",
        "000000001110000000000000000000",
        "000000011100000000000000000000",
        "000000111000000000000000000000",
        "000001110000000000000000000000",
        "000011111111111111111111110000",
        "000011111111111111111111110000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_3 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000011111111111111000000000",
        "000001111000000000011110000000",
        "000011100000000000000111000000",
        "000111000000000000000011100000",
        "000110000000000000000011100000",
        "000000000000000000000111000000",
        "000000000000000000001110000000",
        "000000000000000001111000000000",
        "000000000111111111100000000000",
        "000000000111111111100000000000",
        "000000000000000000111000000000",
        "000000000000000000011100000000",
        "000000000000000000001110000000",
        "000000000000000000001110000000",
        "001100000000000000001110000000",
        "001110000000000000001100000000",
        "000111000000000000011100000000",
        "000011100000000000111000000000",
        "000001111000000001111000000000",
        "000000011111111111000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_4 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000011100000000000",
        "000000000000000111100000000000",
        "000000000000001111100000000000",
        "000000000000011111100000000000",
        "000000000000111011100000000000",
        "000000000001110011100000000000",
        "000000000011100011100000000000",
        "000000000111000011100000000000",
        "000000001110000011100000000000",
        "000000011100000011100000000000",
        "000000111000000011100000000000",
        "000001110000000011100000000000",
        "000011100000000011100000000000",
        "000111111111111111111111110000",
        "000111111111111111111111110000",
        "000000000000000011100000000000",
        "000000000000000011100000000000",
        "000000000000000011100000000000",
        "000000000000000011100000000000",
        "000000000000000011100000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_5 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000111111111111111000000000",
        "000001111111111111111100000000",
        "000001110000000000000000000000",
        "000001110000000000000000000000",
        "000001110000000000000000000000",
        "000001110000000000000000000000",
        "000001111111111111100000000000",
        "000000111111111111110000000000",
        "000000000000000001110000000000",
        "000000000000000000111000000000",
        "000000000000000000011100000000",
        "000000000000000000011100000000",
        "000000000000000000011100000000",
        "000000000000000000111000000000",
        "000000000000000001110000000000",
        "001100000000000011100000000000",
        "001110000000000111000000000000",
        "000111000000001111000000000000",
        "000011111111111100000000000000",
        "000000111111110000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_6 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000001111111111100000000",
        "000000000111110000001111000000",
        "000000001111000000000111000000",
        "000000011100000000000000000000",
        "000000111000000000000000000000",
        "000000110000000000000000000000",
        "000001110001111111110000000000",
        "000001110111000000011100000000",
        "000011101110000000000111000000",
        "000011111000000000000011100000",
        "000011110000000000000011100000",
        "000111110000000000000001110000",
        "000111100000000000000001110000",
        "000111100000000000000001110000",
        "000111100000000000000011100000",
        "000011100000000000000111000000",
        "000011110000000000001110000000",
        "000001111000000000111100000000",
        "000000111111111111111000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_8 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000011111111111110000000000",
        "000001111000000001111000000000",
        "000011100000000000111100000000",
        "000111000000000000011100000000",
        "000110000000000000011100000000",
        "000110000000000000011100000000",
        "000111000000000000011100000000",
        "000011100000000000111000000000",
        "000001111000000001110000000000",
        "000000111111111111000000000000",
        "000001111000000001111000000000",
        "000011100000000000111100000000",
        "000111000000000000011110000000",
        "000110000000000000001110000000",
        "000110000000000000001110000000",
        "000110000000000000011100000000",
        "000111000000000000111000000000",
        "000011110000000011110000000000",
        "000001111111111111000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> digit_9 = {
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000011111111111110000000000",
        "000001111000000001111000000000",
        "000011100000000000111100000000",
        "000111000000000000011110000000",
        "000110000000000000001110000000",
        "001110000000000000001110000000",
        "001100000000000000001110000000",
        "001100000000000000011100000000",
        "001100000000000000111000000000",
        "001110000000000111110000000000",
        "000111111111111111000000000000",
        "000000000000000011000000000000",
        "000000000000000111000000000000",
        "000000000000001110000000000000",
        "000000000000001100000000000000",
        "000000000000011100000000000000",
        "000000000000111000000000000000",
        "000000000001110000000000000000",
        "000000000011100000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000",
        "000000000000000000000000000000"};

    std::vector<std::string> repeating_pattern = {
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111",
        "100000001100000011100000111100",
        "111110001111110011111100111111"};

    std::vector<std::vector<std::string>> all_digits = {
        digit_0, digit_1, digit_2, digit_3,
        digit_4, digit_5, digit_6, digit_8, digit_9};

    send_pattern(dut, repeating_pattern);
    tick_main_clk(dut, 5);
    debug(dut);

    // for (size_t idx = 0; idx < all_digits.size(); ++idx)
    // {
    //     send_digit(dut, all_digits[idx], idx);
    // }

    // send_digit(dut, digit_8, 0); // Test digit 0 again

    std::cout << "[TB IMG] ✅ Image buffer and FSM behavior passed\n";
}